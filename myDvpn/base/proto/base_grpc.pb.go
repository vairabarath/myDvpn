// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: base/proto/base.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BaseNode_RegisterSuperNode_FullMethodName = "/base.BaseNode/RegisterSuperNode"
	BaseNode_RequestExitRegion_FullMethodName = "/base.BaseNode/RequestExitRegion"
	BaseNode_ListSuperNodes_FullMethodName    = "/base.BaseNode/ListSuperNodes"
)

// BaseNodeClient is the client API for BaseNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BaseNode service for global coordination and SuperNode discovery
type BaseNodeClient interface {
	// Register a SuperNode with the BaseNode
	RegisterSuperNode(ctx context.Context, in *RegisterSuperNodeRequest, opts ...grpc.CallOption) (*RegisterSuperNodeResponse, error)
	// Request exit peers from a specific region
	RequestExitRegion(ctx context.Context, in *RequestExitRegionRequest, opts ...grpc.CallOption) (*RequestExitRegionResponse, error)
	// Get list of all SuperNodes for admin purposes
	ListSuperNodes(ctx context.Context, in *ListSuperNodesRequest, opts ...grpc.CallOption) (*ListSuperNodesResponse, error)
}

type baseNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseNodeClient(cc grpc.ClientConnInterface) BaseNodeClient {
	return &baseNodeClient{cc}
}

func (c *baseNodeClient) RegisterSuperNode(ctx context.Context, in *RegisterSuperNodeRequest, opts ...grpc.CallOption) (*RegisterSuperNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterSuperNodeResponse)
	err := c.cc.Invoke(ctx, BaseNode_RegisterSuperNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) RequestExitRegion(ctx context.Context, in *RequestExitRegionRequest, opts ...grpc.CallOption) (*RequestExitRegionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestExitRegionResponse)
	err := c.cc.Invoke(ctx, BaseNode_RequestExitRegion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseNodeClient) ListSuperNodes(ctx context.Context, in *ListSuperNodesRequest, opts ...grpc.CallOption) (*ListSuperNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSuperNodesResponse)
	err := c.cc.Invoke(ctx, BaseNode_ListSuperNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseNodeServer is the server API for BaseNode service.
// All implementations must embed UnimplementedBaseNodeServer
// for forward compatibility.
//
// BaseNode service for global coordination and SuperNode discovery
type BaseNodeServer interface {
	// Register a SuperNode with the BaseNode
	RegisterSuperNode(context.Context, *RegisterSuperNodeRequest) (*RegisterSuperNodeResponse, error)
	// Request exit peers from a specific region
	RequestExitRegion(context.Context, *RequestExitRegionRequest) (*RequestExitRegionResponse, error)
	// Get list of all SuperNodes for admin purposes
	ListSuperNodes(context.Context, *ListSuperNodesRequest) (*ListSuperNodesResponse, error)
	mustEmbedUnimplementedBaseNodeServer()
}

// UnimplementedBaseNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBaseNodeServer struct{}

func (UnimplementedBaseNodeServer) RegisterSuperNode(context.Context, *RegisterSuperNodeRequest) (*RegisterSuperNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSuperNode not implemented")
}
func (UnimplementedBaseNodeServer) RequestExitRegion(context.Context, *RequestExitRegionRequest) (*RequestExitRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestExitRegion not implemented")
}
func (UnimplementedBaseNodeServer) ListSuperNodes(context.Context, *ListSuperNodesRequest) (*ListSuperNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuperNodes not implemented")
}
func (UnimplementedBaseNodeServer) mustEmbedUnimplementedBaseNodeServer() {}
func (UnimplementedBaseNodeServer) testEmbeddedByValue()                  {}

// UnsafeBaseNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseNodeServer will
// result in compilation errors.
type UnsafeBaseNodeServer interface {
	mustEmbedUnimplementedBaseNodeServer()
}

func RegisterBaseNodeServer(s grpc.ServiceRegistrar, srv BaseNodeServer) {
	// If the following call pancis, it indicates UnimplementedBaseNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BaseNode_ServiceDesc, srv)
}

func _BaseNode_RegisterSuperNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSuperNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).RegisterSuperNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseNode_RegisterSuperNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).RegisterSuperNode(ctx, req.(*RegisterSuperNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_RequestExitRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestExitRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).RequestExitRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseNode_RequestExitRegion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).RequestExitRegion(ctx, req.(*RequestExitRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseNode_ListSuperNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSuperNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseNodeServer).ListSuperNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseNode_ListSuperNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseNodeServer).ListSuperNodes(ctx, req.(*ListSuperNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BaseNode_ServiceDesc is the grpc.ServiceDesc for BaseNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaseNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base.BaseNode",
	HandlerType: (*BaseNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSuperNode",
			Handler:    _BaseNode_RegisterSuperNode_Handler,
		},
		{
			MethodName: "RequestExitRegion",
			Handler:    _BaseNode_RequestExitRegion_Handler,
		},
		{
			MethodName: "ListSuperNodes",
			Handler:    _BaseNode_ListSuperNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/proto/base.proto",
}
