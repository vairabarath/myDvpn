// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: clientPeer/proto/super_node.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ControlStream_PersistentControlStream_FullMethodName = "/control.ControlStream/PersistentControlStream"
)

// ControlStreamClient is the client API for ControlStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Main persistent control stream service
type ControlStreamClient interface {
	// Bi-directional persistent stream for all control communication
	PersistentControlStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ControlMessage, ControlMessage], error)
}

type controlStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewControlStreamClient(cc grpc.ClientConnInterface) ControlStreamClient {
	return &controlStreamClient{cc}
}

func (c *controlStreamClient) PersistentControlStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ControlMessage, ControlMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ControlStream_ServiceDesc.Streams[0], ControlStream_PersistentControlStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ControlMessage, ControlMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlStream_PersistentControlStreamClient = grpc.BidiStreamingClient[ControlMessage, ControlMessage]

// ControlStreamServer is the server API for ControlStream service.
// All implementations must embed UnimplementedControlStreamServer
// for forward compatibility.
//
// Main persistent control stream service
type ControlStreamServer interface {
	// Bi-directional persistent stream for all control communication
	PersistentControlStream(grpc.BidiStreamingServer[ControlMessage, ControlMessage]) error
	mustEmbedUnimplementedControlStreamServer()
}

// UnimplementedControlStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControlStreamServer struct{}

func (UnimplementedControlStreamServer) PersistentControlStream(grpc.BidiStreamingServer[ControlMessage, ControlMessage]) error {
	return status.Errorf(codes.Unimplemented, "method PersistentControlStream not implemented")
}
func (UnimplementedControlStreamServer) mustEmbedUnimplementedControlStreamServer() {}
func (UnimplementedControlStreamServer) testEmbeddedByValue()                       {}

// UnsafeControlStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlStreamServer will
// result in compilation errors.
type UnsafeControlStreamServer interface {
	mustEmbedUnimplementedControlStreamServer()
}

func RegisterControlStreamServer(s grpc.ServiceRegistrar, srv ControlStreamServer) {
	// If the following call pancis, it indicates UnimplementedControlStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ControlStream_ServiceDesc, srv)
}

func _ControlStream_PersistentControlStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControlStreamServer).PersistentControlStream(&grpc.GenericServerStream[ControlMessage, ControlMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ControlStream_PersistentControlStreamServer = grpc.BidiStreamingServer[ControlMessage, ControlMessage]

// ControlStream_ServiceDesc is the grpc.ServiceDesc for ControlStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control.ControlStream",
	HandlerType: (*ControlStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PersistentControlStream",
			Handler:       _ControlStream_PersistentControlStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "clientPeer/proto/super_node.proto",
}

const (
	SuperNode_RequestExitPeer_FullMethodName = "/control.SuperNode/RequestExitPeer"
)

// SuperNodeClient is the client API for SuperNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SuperNode service for inter-supernode communication
type SuperNodeClient interface {
	// Request exit peers from another SuperNode
	RequestExitPeer(ctx context.Context, in *RequestExitPeerRequest, opts ...grpc.CallOption) (*RequestExitPeerResponse, error)
}

type superNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewSuperNodeClient(cc grpc.ClientConnInterface) SuperNodeClient {
	return &superNodeClient{cc}
}

func (c *superNodeClient) RequestExitPeer(ctx context.Context, in *RequestExitPeerRequest, opts ...grpc.CallOption) (*RequestExitPeerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestExitPeerResponse)
	err := c.cc.Invoke(ctx, SuperNode_RequestExitPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuperNodeServer is the server API for SuperNode service.
// All implementations must embed UnimplementedSuperNodeServer
// for forward compatibility.
//
// SuperNode service for inter-supernode communication
type SuperNodeServer interface {
	// Request exit peers from another SuperNode
	RequestExitPeer(context.Context, *RequestExitPeerRequest) (*RequestExitPeerResponse, error)
	mustEmbedUnimplementedSuperNodeServer()
}

// UnimplementedSuperNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSuperNodeServer struct{}

func (UnimplementedSuperNodeServer) RequestExitPeer(context.Context, *RequestExitPeerRequest) (*RequestExitPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestExitPeer not implemented")
}
func (UnimplementedSuperNodeServer) mustEmbedUnimplementedSuperNodeServer() {}
func (UnimplementedSuperNodeServer) testEmbeddedByValue()                   {}

// UnsafeSuperNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuperNodeServer will
// result in compilation errors.
type UnsafeSuperNodeServer interface {
	mustEmbedUnimplementedSuperNodeServer()
}

func RegisterSuperNodeServer(s grpc.ServiceRegistrar, srv SuperNodeServer) {
	// If the following call pancis, it indicates UnimplementedSuperNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SuperNode_ServiceDesc, srv)
}

func _SuperNode_RequestExitPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestExitPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperNodeServer).RequestExitPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperNode_RequestExitPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperNodeServer).RequestExitPeer(ctx, req.(*RequestExitPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SuperNode_ServiceDesc is the grpc.ServiceDesc for SuperNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuperNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control.SuperNode",
	HandlerType: (*SuperNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestExitPeer",
			Handler:    _SuperNode_RequestExitPeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clientPeer/proto/super_node.proto",
}
